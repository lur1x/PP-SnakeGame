/*Разработайте программу, которая:
Запрашивает у пользователя исходную строку.
Предоставляет меню с 4 опциями: insert, erase, replace, и find.
В зависимости от выбора пользователя, программа предоставляет инструкции для использования соответствующего метода и выводит результат.
*/

#include <iostream>
#include <string>
#include <windows.h>
int main()
{   
    setlocale(LC_CTYPE, "Russian");
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);

    std::string str;
    int option;

    std::cout << "Введите какую-нибудь строку\n";
    getline(std::cin, str);
    option = 0;
    while (option != 6) {
        std::cout << "Что вы хотите сделать со строкой?\n"
            << "1 - вставить подстроку\n"
            << "2 - удалить подстроку\n"
            << "3 - изменить подстроку\n"
            << "4 - найти подстроку\n"
            << "5 - вывести строку\n"
            << "6 - выйти из программы\n";
        std::cin >> option;
        switch (option) {
        case 1: {

            int index;
            std::string subStr;

            std::cout << "Чтобы вставить подстроку в нашу строку, мы воспользумеся методом insert.\n"
                << "**Инструкция по insert**\n"
                << "Для работы с данным методом нам нужны два аргмуента.\n"
                << "Первый аргумент - индекс, по которому нужно вставить подстроку.\n"
                << "Второй аргумент - подстрока, которую следует вставить по указанному индексу.\n"
                << "Давайте приступим к работе\n";

            std::cout << "Где вы хотите вставить подстроку?\n";
            std::cin >> index;
            std::cin.ignore(); // Очистка буфера после ввода index
            if (index <= str.length()) {
                std::cout << "Что вы хотите вставить?\n";
                getline(std::cin, subStr);
                str.insert(index, subStr);
                std::cout << "Ваша изменённая строка: " << str << "\n";
            }
            else {
                std::cerr << "Вы вышли за строку!\n";
            }
            break;
        }
        case 2: {

            int index, amt;

            std::cout << "Чтобы удалить символы в строке, мы воспользумеся методом erase.\n"
                << "**Инструкция по erase**\n"
                << "Для работы с данным методом нам нужны два аргмуента.\n"
                << "Первый аргумент - позиция, с которой нужно начинать удалять.\n"
                << "Второй аргумент - количество символов, сколько нужно удалить.\n"
                << "Давайте приступим к работе\n";

            std::cout << "Начиная с какой позиции вы хотите удалять?\n";
            std::cin >> index;
            if (index <= str.length()) {
                std::cout << "Сколько символов вы хотите удалить?\n";
                std::cin >> amt;
                str.erase(index, amt);
                std::cout << "Ваша изменённая строка: " << str << "\n";
            }
            else {
                std::cerr << "Вы вышли за строку!\n";
            }
            break;
        }
        case 3: {
            int index, amt;
            std::string subStr;

            std::cout << "Чтобы изменить строку, мы воспользумеся методом replace.\n"
                << "**Инструкция по replace**\n"
                << "Для работы с данным методом нам нужно 3 аргмуента.\n"
                << "Первый аргумент - позиция, с которой нужно начинать замену.\n"
                << "Второй аргумент - количество символов, которые нужно заменить.\n"
                << "Третий аргумент - строка, на которую нужно заменить.\n"
                << "Давайте приступим к работе\n";

            std::cout << "Начиная с какой позиции вы хотите заменить?\n";
            std::cin >> index;
            if (index <= str.length()) {
                std::cout << "Сколько символов вы хотите заменить?\n";
                std::cin >> amt;
                std::cout << "На какую строку вы хотите заменить?\n";
                std::cin.ignore(); // Очистка буфера после ввода index
                getline(std::cin, subStr);
                str.replace(index, amt, subStr);
                std::cout << "Ваша изменённая строка: " << str << "\n";
            }
            else {
                std::cerr << "Вы вышли за строку!\n";
            }
            break;
        }
        case 4: {
            int index;
            std::string subStr;

            std::cout << "Чтобы найти подстроку в строке, мы воспользумеся методом find.\n"
                << "**Инструкция по find**\n"
                << "Для работы с данным методом нам нужен 1 аргмуент.\n"
                << "Это подстрока, которую нужно найти.\n"
                << "Давайте приступим к работе\n";

            std::cout << "Какую подстроку вы хотите найти?\n";
            std::cin.ignore(); // Очистка буфера после ввода index
            getline(std::cin, subStr);
            if (subStr.empty()) {
                std::cerr << "Вы ввели пустую строку!\n";
            }
            else {
                index = static_cast<int>(str.find(subStr));
                if (index == -1) {
                    std::cout << "Подстроку не удалось найти\n";
                }
                else {
                    std::cout << "Индекс первого вхождения подстроки: " << index << "\n";
                }
            }
            break;
        }
        case 5: 
            std::cout << "Ваша строка: " << str << "\n";
            break;
        }
        std::cout << "##########################################################################################################################";
    }
    return 0;
}
